{"ast":null,"code":"/**\n * A function that implements expansion for \"textDecoration\" to all sides of an element, it's simplified - check usage examples.\n *\n * @example\n *  textDecoration('none')\n *  textDecoration('dotted')\n *  textDecoration('underline', 'dotted')\n *  textDecoration('underline', 'dotted', 'red')\n *  textDecoration('underline', 'dotted', 'red', '2px')\n *\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\n */\nfunction textDecoration(value, ...values) {\n  if (values.length === 0) {\n    return isTextDecorationStyleInput(value) ? {\n      textDecorationStyle: value\n    } : {\n      textDecorationLine: value\n    };\n  }\n  const [textDecorationStyle, textDecorationColor, textDecorationThickness] = values;\n  return Object.assign({\n    textDecorationLine: value\n  }, textDecorationStyle && {\n    textDecorationStyle\n  }, textDecorationColor && {\n    textDecorationColor\n  }, textDecorationThickness && {\n    textDecorationThickness\n  });\n}\nconst textDecorationStyleInputs = ['dashed', 'dotted', 'double', 'solid', 'wavy'];\nfunction isTextDecorationStyleInput(value) {\n  return textDecorationStyleInputs.includes(value);\n}\nexport { textDecoration };","map":{"version":3,"names":["textDecoration","value","values","length","isTextDecorationStyleInput","textDecorationStyle","textDecorationLine","textDecorationColor","textDecorationThickness","Object","assign","textDecorationStyleInputs","includes"],"sources":["/Users/gideoncrawley/Projects/Lookeeloo/packages/core/src/shorthands/textDecoration.ts"],"sourcesContent":["import type { GriffelStyle } from '@griffel/style-types';\nimport type {\n  TextDecorationColorInput,\n  TextDecorationLineInput,\n  TextDecorationStyleInput,\n  TextDecorationThicknessInput,\n} from './types';\n\ntype TextDecorationStyle = Pick<\n  GriffelStyle,\n  'textDecorationStyle' | 'textDecorationLine' | 'textDecorationColor' | 'textDecorationThickness'\n>;\n\nexport function textDecoration(style: TextDecorationStyleInput): TextDecorationStyle;\nexport function textDecoration(line: TextDecorationLineInput): TextDecorationStyle;\n\nexport function textDecoration(line: TextDecorationLineInput, style: TextDecorationStyleInput): TextDecorationStyle;\nexport function textDecoration(\n  line: TextDecorationLineInput,\n  style: TextDecorationStyleInput,\n  color: TextDecorationColorInput,\n): TextDecorationStyle;\nexport function textDecoration(\n  line: TextDecorationLineInput,\n  style: TextDecorationStyleInput,\n  color: TextDecorationColorInput,\n  thickness: TextDecorationThicknessInput,\n): TextDecorationStyle;\n\n/**\n * A function that implements expansion for \"textDecoration\" to all sides of an element, it's simplified - check usage examples.\n *\n * @example\n *  textDecoration('none')\n *  textDecoration('dotted')\n *  textDecoration('underline', 'dotted')\n *  textDecoration('underline', 'dotted', 'red')\n *  textDecoration('underline', 'dotted', 'red', '2px')\n *\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\n */\nexport function textDecoration(\n  value: TextDecorationLineInput | TextDecorationStyleInput,\n  ...values: [TextDecorationStyleInput?, TextDecorationColorInput?, TextDecorationThicknessInput?]\n): TextDecorationStyle {\n  if (values.length === 0) {\n    return isTextDecorationStyleInput(value) ? { textDecorationStyle: value } : { textDecorationLine: value };\n  }\n\n  const [textDecorationStyle, textDecorationColor, textDecorationThickness] = values;\n\n  return {\n    textDecorationLine: value,\n    ...(textDecorationStyle && { textDecorationStyle }),\n    ...(textDecorationColor && { textDecorationColor }),\n    ...(textDecorationThickness && { textDecorationThickness }),\n  };\n}\n\nconst textDecorationStyleInputs: TextDecorationStyleInput[] = ['dashed', 'dotted', 'double', 'solid', 'wavy'];\n\nfunction isTextDecorationStyleInput(\n  value: TextDecorationLineInput | TextDecorationStyleInput,\n): value is TextDecorationStyleInput {\n  return textDecorationStyleInputs.includes(value as TextDecorationStyleInput);\n}\n"],"mappings":"AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAcA,CAC5BC,KAAyD,EACzD,GAAGC,MAA6F,EAC3E;EACrB,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;IACvB,OAAOC,0BAA0B,CAACH,KAAK,CAAC,GAAG;MAAEI,mBAAmB,EAAEJ;IAAM,CAAC,GAAG;MAAEK,kBAAkB,EAAEL;KAAO;EAC3G;EAEA,MAAM,CAACI,mBAAmB,EAAEE,mBAAmB,EAAEC,uBAAuB,CAAC,GAAGN,MAAM;EAElF,OAAAO,MAAA,CAAAC,MAAA;IACEJ,kBAAkB,EAAEL;EAAK,GACrBI,mBAAmB,IAAI;IAAEA;GAAqB,EAC9CE,mBAAmB,IAAI;IAAEA;GAAqB,EAC9CC,uBAAuB,IAAI;IAAEA;GAAyB;AAE9D;AAEA,MAAMG,yBAAqD,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC;AAE7G,SAASP,0BAA0BA,CACjCH,KAAyD,EACtB;EACnC,OAAOU,yBAAyB,CAACC,QAAQ,CAACX,KAAiC,CAAC;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}