{"ast":null,"code":"import { RULESET, tokenize } from 'stylis';\nconst globalPlugin = element => {\n  switch (element.type) {\n    case RULESET:\n      if (typeof element.props === 'string') {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`\"element.props\" has type \"string\" (${JSON.stringify(element.props, null, 2)}), it's not expected. Please report a bug if it happens.`);\n        }\n        return;\n      }\n      element.props = element.props.map(value => {\n        // Avoids calling tokenize() on every string\n        if (value.indexOf(':global(') === -1) {\n          return value;\n        }\n        return tokenize(value).reduce((acc, value, index, children) => {\n          if (value === '') {\n            return acc;\n          }\n          if (value === ':' && children[index + 1] === 'global') {\n            const selector =\n            // An inner part of \":global()\"\n            children[index + 2].slice(1, -1) +\n            // A separator between selectors i.e. \"body .class\"\n            ' ';\n            acc.unshift(selector);\n            children[index + 1] = '';\n            children[index + 2] = '';\n            return acc;\n          }\n          acc.push(value);\n          return acc;\n        }, []).join('');\n      });\n  }\n};\nexport { globalPlugin };","map":{"version":3,"names":["globalPlugin","element","type","RULESET","props","process","env","NODE_ENV","Error","JSON","stringify","map","value","indexOf","tokenize","reduce","acc","index","children","selector","slice","unshift","push","join"],"sources":["/Users/gideoncrawley/Projects/Lookeeloo/packages/core/src/runtime/stylis/globalPlugin.ts"],"sourcesContent":["import { RULESET, tokenize } from 'stylis';\nimport type { Middleware } from 'stylis';\n\nexport const globalPlugin: Middleware = element => {\n  switch (element.type) {\n    case RULESET:\n      if (typeof element.props === 'string') {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `\"element.props\" has type \"string\" (${JSON.stringify(\n              element.props,\n              null,\n              2,\n            )}), it's not expected. Please report a bug if it happens.`,\n          );\n        }\n\n        return;\n      }\n\n      element.props = element.props.map(value => {\n        // Avoids calling tokenize() on every string\n        if (value.indexOf(':global(') === -1) {\n          return value;\n        }\n\n        return tokenize(value)\n          .reduce<string[]>((acc, value, index, children) => {\n            if (value === '') {\n              return acc;\n            }\n\n            if (value === ':' && children[index + 1] === 'global') {\n              const selector =\n                // An inner part of \":global()\"\n                children[index + 2].slice(1, -1) +\n                // A separator between selectors i.e. \"body .class\"\n                ' ';\n\n              acc.unshift(selector);\n\n              children[index + 1] = '';\n              children[index + 2] = '';\n\n              return acc;\n            }\n\n            acc.push(value);\n            return acc;\n          }, [])\n          .join('');\n      });\n  }\n};\n"],"mappings":";AAGa,MAAAA,YAAwB,GAAGC,OAAO,IAAI;EACjD,QAAQA,OAAO,CAACC,IAAI;IAClB,KAAKC,OAAO;MACV,IAAI,OAAOF,OAAO,CAACG,KAAK,KAAK,QAAQ,EAAE;QACrC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzC,MAAM,IAAIC,KAAK,CACyB,sCAAAC,IAAI,CAACC,SAAS,CAClDT,OAAO,CAACG,KAAK,EACb,IAAI,EACJ,CACF,CAAE,0DACJ,CAAC;QACH;QAEA;MACF;MAEAH,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACG,KAAK,CAACO,GAAG,CAACC,KAAK,IAAI;QACzC;QACA,IAAIA,KAAK,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;UACpC,OAAOD,KAAK;QACd;QAEA,OAAOE,QAAQ,CAACF,KAAK,CAAC,CACnBG,MAAM,CAAW,CAACC,GAAG,EAAEJ,KAAK,EAAEK,KAAK,EAAEC,QAAQ,KAAK;UACjD,IAAIN,KAAK,KAAK,EAAE,EAAE;YAChB,OAAOI,GAAG;UACZ;UAEA,IAAIJ,KAAK,KAAK,GAAG,IAAIM,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,KAAK,QAAQ,EAAE;YACrD,MAAME,QAAQ;YACZ;YACAD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChC;YACA,GAAG;YAELJ,GAAG,CAACK,OAAO,CAACF,QAAQ,CAAC;YAErBD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE;YACxBC,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE;YAExB,OAAOD,GAAG;UACZ;UAEAA,GAAG,CAACM,IAAI,CAACV,KAAK,CAAC;UACf,OAAOI,GAAG;QACZ,CAAC,EAAE,EAAE,CAAC,CACLO,IAAI,CAAC,EAAE,CAAC;MACb,CAAC,CAAC;EACN;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}