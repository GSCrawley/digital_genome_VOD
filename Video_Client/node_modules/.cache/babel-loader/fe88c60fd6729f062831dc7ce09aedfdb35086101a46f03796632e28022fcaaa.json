{"ast":null,"code":"import { SEQUENCE_PREFIX, SEQUENCE_SIZE } from '../constants.esm.js';\nimport { mergeClassesCachedResults } from '../mergeClasses.esm.js';\nconst sequenceDetails = {};\nconst cssRules = /*#__PURE__*/new Set();\nconst debugData = {\n  getChildrenSequences: debugSequenceHash => {\n    const key = Object.keys(mergeClassesCachedResults).find(key => mergeClassesCachedResults[key].startsWith(debugSequenceHash));\n    if (key) {\n      // key of the mergeClasses cache contains merge order\n      return key.split(SEQUENCE_PREFIX).filter(sequence => sequence.length).map(sequence => SEQUENCE_PREFIX + sequence);\n    }\n    return [];\n  },\n  addCSSRule: rule => {\n    cssRules.add(rule);\n  },\n  addSequenceDetails: (classNamesForSlots, sourceURL) => {\n    Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {\n      sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {\n        slotName,\n        sourceURL\n      };\n    });\n  },\n  getCSSRules: () => {\n    return Array.from(cssRules);\n  },\n  getSequenceDetails: sequenceHash => {\n    return sequenceDetails[sequenceHash];\n  }\n};\nexport { debugData };","map":{"version":3,"names":["sequenceDetails","cssRules","Set","debugData","getChildrenSequences","debugSequenceHash","key","Object","keys","mergeClassesCachedResults","find","startsWith","split","SEQUENCE_PREFIX","filter","sequence","length","map","addCSSRule","rule","add","addSequenceDetails","classNamesForSlots","sourceURL","entries","forEach","slotName","sequenceHash","substring","SEQUENCE_SIZE","getCSSRules","Array","from","getSequenceDetails"],"sources":["/Users/gideoncrawley/Projects/Lookeeloo/packages/core/src/devtools/store.ts"],"sourcesContent":["import type { SequenceHash } from '../types';\nimport { SEQUENCE_PREFIX, SEQUENCE_SIZE } from '../constants';\nimport { mergeClassesCachedResults } from '../mergeClasses';\n\nconst sequenceDetails: Record<SequenceHash, { slotName: string; sourceURL?: string }> = {};\n\nconst cssRules = new Set<string>();\n\nexport const debugData = {\n  getChildrenSequences: (debugSequenceHash: SequenceHash): SequenceHash[] => {\n    const key = Object.keys(mergeClassesCachedResults).find(key =>\n      mergeClassesCachedResults[key].startsWith(debugSequenceHash),\n    );\n\n    if (key) {\n      // key of the mergeClasses cache contains merge order\n      return key\n        .split(SEQUENCE_PREFIX)\n        .filter(sequence => sequence.length)\n        .map(sequence => SEQUENCE_PREFIX + sequence);\n    }\n\n    return [];\n  },\n\n  addCSSRule: (rule: string) => {\n    cssRules.add(rule);\n  },\n  addSequenceDetails: <Slots extends string | number>(\n    classNamesForSlots: Record<Slots, string>,\n    sourceURL?: string,\n  ) => {\n    Object.entries<string>(classNamesForSlots).forEach(([slotName, sequenceHash]) => {\n      sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = { slotName, sourceURL };\n    });\n  },\n\n  getCSSRules: (): string[] => {\n    return Array.from(cssRules);\n  },\n  getSequenceDetails: (sequenceHash: SequenceHash): typeof sequenceDetails[string] | undefined => {\n    return sequenceDetails[sequenceHash];\n  },\n};\n"],"mappings":";;AAIA,MAAMA,eAA+E,GAAG,EAAE;AAE1F,MAAMC,QAAQ,gBAAG,IAAIC,GAAG,EAAU;AAE3B,MAAMC,SAAS,GAAG;EACvBC,oBAAoB,EAAGC,iBAA+B,IAAqB;IACzE,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACC,yBAAyB,CAAC,CAACC,IAAI,CAACJ,GAAG,IACzDG,yBAAyB,CAACH,GAAG,CAAC,CAACK,UAAU,CAACN,iBAAiB,CAC7D,CAAC;IAED,IAAIC,GAAG,EAAE;MACP;MACA,OAAOA,GAAG,CACPM,KAAK,CAACC,eAAe,CAAC,CACtBC,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC,CACnCC,GAAG,CAACF,QAAQ,IAAIF,eAAe,GAAGE,QAAQ,CAAC;IAChD;IAEA,OAAO,EAAE;GACV;EAEDG,UAAU,EAAGC,IAAY,IAAK;IAC5BlB,QAAQ,CAACmB,GAAG,CAACD,IAAI,CAAC;GACnB;EACDE,kBAAkB,EAAEA,CAClBC,kBAAyC,EACzCC,SAAkB,KACf;IACHhB,MAAM,CAACiB,OAAO,CAASF,kBAAkB,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAEC,YAAY,CAAC,KAAK;MAC/E3B,eAAe,CAAC2B,YAAY,CAACC,SAAS,CAAC,CAAC,EAAEC,aAAa,CAAC,CAAC,GAAG;QAAEH,QAAQ;QAAEH;OAAW;IACrF,CAAC,CAAC;GACH;EAEDO,WAAW,EAAEA,CAAA,KAAgB;IAC3B,OAAOC,KAAK,CAACC,IAAI,CAAC/B,QAAQ,CAAC;GAC5B;EACDgC,kBAAkB,EAAGN,YAA0B,IAAiD;IAC9F,OAAO3B,eAAe,CAAC2B,YAAY,CAAC;EACtC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}