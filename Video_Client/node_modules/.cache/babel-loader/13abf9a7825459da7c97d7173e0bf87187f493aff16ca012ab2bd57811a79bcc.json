{"ast":null,"code":"var _jsxFileName = \"/Users/gideoncrawley/Projects/Lookeeloo/src/pages/Player.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LKUIVideoPlayer from \"../components/LKUIVideoPlayer\";\nimport JSONTestData from \"../tests/movies.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Player() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [moviesData, setMoviesData] = useState(null);\n  useEffect(() => {\n    // Set movies data directly from the imported JSON file\n    setMoviesData(JSONTestData);\n  }, []);\n  if (!moviesData) {\n    // Data not loaded yet\n    return null;\n  }\n  const {\n    movies\n  } = moviesData;\n\n  // Find the movie object with the matching id\n  const selectedMovie = movies.find(movie => movie.id === id);\n  if (!selectedMovie) {\n    console.error(\"Movie not found for id:\", id);\n    return null;\n  }\n\n  // Extract title, URL, and subtitles from the selected movie\n  const {\n    name,\n    url,\n    subtitles\n  } = selectedMovie;\n  if (window.location.href.includes('lookeeloo-canary')) {\n    document.title = `${name} - Lookeeloo (Canary [BETA])`;\n  } else if (window.location.href.includes('localhost')) {\n    document.title = `${name} - Lookeeloo (running at localhost)`;\n  } else {\n    document.title = `${name} - Lookeeloo`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lkui-player-page\",\n    children: [/*#__PURE__*/_jsxDEV(LKUIVideoPlayer, {\n      videoPath: url,\n      captionsPath: subtitles,\n      videoName: name,\n      height: 550\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"kuuSdsKvaH66HMY8FotScfI1a88=\", false, function () {\n  return [useParams];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useEffect","useState","useParams","LKUIVideoPlayer","JSONTestData","jsxDEV","_jsxDEV","Player","_s","id","moviesData","setMoviesData","movies","selectedMovie","find","movie","console","error","name","url","subtitles","window","location","href","includes","document","title","className","children","videoPath","captionsPath","videoName","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gideoncrawley/Projects/Lookeeloo/src/pages/Player.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LKUIVideoPlayer from \"../components/LKUIVideoPlayer\";\nimport JSONTestData from \"../tests/movies.json\";\n\nfunction Player() {\n  const { id } = useParams<{ id: string }>();\n  const [moviesData, setMoviesData] = useState<{ movies: Movie[] } | null>(null);\n\n  useEffect(() => {\n    // Set movies data directly from the imported JSON file\n    setMoviesData(JSONTestData);\n  }, []);\n\n  if (!moviesData) {\n    // Data not loaded yet\n    return null;\n  }\n\n  const { movies } = moviesData;\n\n  // Find the movie object with the matching id\n  const selectedMovie = movies.find((movie) => movie.id === id);\n\n  if (!selectedMovie) {\n    console.error(\"Movie not found for id:\", id);\n    return null;\n  }\n\n  // Extract title, URL, and subtitles from the selected movie\n  const { name, url, subtitles } = selectedMovie;\n  if (window.location.href.includes('lookeeloo-canary')) {\n    document.title = `${name} - Lookeeloo (Canary [BETA])`\n  } else if (window.location.href.includes('localhost')) {\n    document.title = `${name} - Lookeeloo (running at localhost)`\n  } else {\n    document.title = `${name} - Lookeeloo`;\n  }\n\n  return (\n    <div className=\"lkui-player-page\">\n      <LKUIVideoPlayer videoPath={url} captionsPath={subtitles} videoName={name} height={550}></LKUIVideoPlayer>\n      <h2>{name}</h2>\n    </div>\n  );\n}\n\nexport default Player;\n\ninterface Movie {\n  id: string;\n  name: string;\n  url: string;\n  subtitles?: string;\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,YAAY,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAiB,CAAC;EAC1C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAA6B,IAAI,CAAC;EAE9ED,SAAS,CAAC,MAAM;IACd;IACAW,aAAa,CAACP,YAAY,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACM,UAAU,EAAE;IACf;IACA,OAAO,IAAI;EACb;EAEA,MAAM;IAAEE;EAAO,CAAC,GAAGF,UAAU;;EAE7B;EACA,MAAMG,aAAa,GAAGD,MAAM,CAACE,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACN,EAAE,KAAKA,EAAE,CAAC;EAE7D,IAAI,CAACI,aAAa,EAAE;IAClBG,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAER,EAAE,CAAC;IAC5C,OAAO,IAAI;EACb;;EAEA;EACA,MAAM;IAAES,IAAI;IAAEC,GAAG;IAAEC;EAAU,CAAC,GAAGP,aAAa;EAC9C,IAAIQ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IACrDC,QAAQ,CAACC,KAAK,GAAI,GAAER,IAAK,8BAA6B;EACxD,CAAC,MAAM,IAAIG,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;IACrDC,QAAQ,CAACC,KAAK,GAAI,GAAER,IAAK,qCAAoC;EAC/D,CAAC,MAAM;IACLO,QAAQ,CAACC,KAAK,GAAI,GAAER,IAAK,cAAa;EACxC;EAEA,oBACEZ,OAAA;IAAKqB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BtB,OAAA,CAACH,eAAe;MAAC0B,SAAS,EAAEV,GAAI;MAACW,YAAY,EAAEV,SAAU;MAACW,SAAS,EAAEb,IAAK;MAACc,MAAM,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAkB,CAAC,eAC1G9B,OAAA;MAAAsB,QAAA,EAAKV;IAAI;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAAC5B,EAAA,CAxCQD,MAAM;EAAA,QACEL,SAAS;AAAA;AAAAmC,EAAA,GADjB9B,MAAM;AA0Cf,eAAeA,MAAM;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}