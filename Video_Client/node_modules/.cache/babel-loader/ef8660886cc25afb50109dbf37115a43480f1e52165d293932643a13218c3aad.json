{"ast":null,"code":"import { rehydrateRendererCache, createDOMRenderer } from '@griffel/core';\nimport * as React from 'react';\nimport { canUseDOM } from './utils/canUseDOM.esm.js';\n\n/**\n * @private\n */\nconst RendererContext = /*#__PURE__*/React.createContext( /*#__PURE__*/createDOMRenderer());\n\n/**\n * @public\n */\nconst RendererProvider = ({\n  children,\n  renderer,\n  targetDocument\n}) => {\n  if (canUseDOM()) {\n    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n    // mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useMemo(() => {\n      // \"rehydrateCache()\" can't be called in effects as it needs to be called before any component will be rendered to\n      // avoid double insertion of classes\n      rehydrateRendererCache(renderer, targetDocument);\n    }, [renderer, targetDocument]);\n  }\n  return /*#__PURE__*/React.createElement(RendererContext.Provider, {\n    value: renderer\n  }, children);\n};\n\n/**\n * Returns an instance of current makeStyles() renderer.\n *\n * @private Exported as \"useRenderer_unstable\" use it on own risk. Can be changed or removed without a notice.\n */\nfunction useRenderer() {\n  return React.useContext(RendererContext);\n}\nexport { RendererProvider, useRenderer };","map":{"version":3,"names":["RendererContext","React","createContext","createDOMRenderer","RendererProvider","children","renderer","targetDocument","canUseDOM","useMemo","rehydrateRendererCache","createElement","Provider","value","useRenderer","useContext"],"sources":["/Users/gideoncrawley/Projects/Lookeeloo/packages/react/src/RendererContext.tsx"],"sourcesContent":["import { createDOMRenderer, rehydrateRendererCache } from '@griffel/core';\nimport type { GriffelRenderer } from '@griffel/core';\nimport * as React from 'react';\n\nimport { canUseDOM } from './utils/canUseDOM';\n\nexport interface RendererProviderProps {\n  /** An instance of Griffel renderer. */\n  renderer: GriffelRenderer;\n\n  /**\n   * Document used to insert CSS variables to head\n   */\n  targetDocument?: Document;\n\n  /**\n   * Content wrapped by the RendererProvider\n   */\n  children: React.ReactNode;\n}\n\n/**\n * @private\n */\nconst RendererContext = React.createContext<GriffelRenderer>(createDOMRenderer());\n\n/**\n * @public\n */\nexport const RendererProvider: React.FC<RendererProviderProps> = ({ children, renderer, targetDocument }) => {\n  if (canUseDOM()) {\n    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n    // mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useMemo(() => {\n      // \"rehydrateCache()\" can't be called in effects as it needs to be called before any component will be rendered to\n      // avoid double insertion of classes\n      rehydrateRendererCache(renderer, targetDocument);\n    }, [renderer, targetDocument]);\n  }\n\n  return <RendererContext.Provider value={renderer}>{children}</RendererContext.Provider>;\n};\n\n/**\n * Returns an instance of current makeStyles() renderer.\n *\n * @private Exported as \"useRenderer_unstable\" use it on own risk. Can be changed or removed without a notice.\n */\nexport function useRenderer(): GriffelRenderer {\n  return React.useContext(RendererContext);\n}\n"],"mappings":";;;;AAqBA;AACA;AACA;AACA,MAAMA,eAAe,gBAAGC,KAAK,CAACC,aAAa,eAAkBC,iBAAiB,EAAE,CAAC;;AAEjF;AACA;AACA;AACO,MAAMC,gBAAiD,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAe,CAAC,KAAK;EAC3G,IAAIC,SAAS,EAAE,EAAE;IACf;IACA;IACA;IACAP,KAAK,CAACQ,OAAO,CAAC,MAAM;MAClB;MACA;MACAC,sBAAsB,CAACJ,QAAQ,EAAEC,cAAc,CAAC;IAClD,CAAC,EAAE,CAACD,QAAQ,EAAEC,cAAc,CAAC,CAAC;EAChC;EAEA,oBAAON,KAAA,CAAAU,aAAA,CAACX,eAAe,CAACY,QAAQ;IAACC,KAAK,EAAEP;EAAS,GAAED,QAAmC,CAAC;AACzF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASS,WAAWA,CAAA,EAAoB;EAC7C,OAAOb,KAAK,CAACc,UAAU,CAACf,eAAe,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}